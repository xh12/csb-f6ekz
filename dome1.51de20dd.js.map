{"version":3,"sources":["src/virtualDOM.js","dome/dome1.js"],"names":["VNode","tag","data","value","type","toLowerCase","children","vnode","push","getVNode","node","nodeType","_vnode","console","log","nodeName","attrs","attributes","_attrObj","i","length","nodeValue","undefined","childNodes","appendChild","parseNode","_node","document","createTextNode","createElement","Object","keys","forEach","key","attrName","attrValue","setAttribute","subVNode","mustche","createGetValuePath","path","paths","split","obj","res","prop","shift","combine","_type","_data","_value","_tag","_children","replace","_","g1","trim","_subvnode","JGVue","opations","_template","querySelector","el","_parent","parentNode","mount","prototype","render","createRenderFn","mountComponent","update","ast","tmp","dom","replaceChild","app","name","firstName","lastName","message"],"mappings":"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","file":"dome1.51de20dd.js","sourceRoot":"..","sourcesContent":["//  虚拟DOM\r\n//  为啥要使用虚拟dom 直接在页面操作dom 需要页面不断更新进行重绘。使用虚拟dom 所有操作都在内存中完成，只用插入一次\r\nclass VNode {\r\n  constructor(tag, data, value, type) {\r\n    this.tag = tag && tag.toLowerCase();\r\n    this.data = data;\r\n    this.value = value;\r\n    this.type = type;\r\n    this.children = [];\r\n  }\r\n  appendChild(vnode) {\r\n    this.children.push(vnode);\r\n  }\r\n}\r\n\r\n/**\r\n * 使用递归来遍历DOM 元素 生成虚拟DOM\r\n * vue 中源码使用的是栈结构，使用栈存储 父元素实现递归生成\r\n * dom -》 vnode\r\n */\r\nexport function getVNode(node) {\r\n  let nodeType = node.nodeType;\r\n  let _vnode = null;\r\n  console.log(node.nodeName);\r\n  if (nodeType === 1) {\r\n    // 元素\r\n    let nodeName = node.nodeName;\r\n    let attrs = node.attributes;\r\n    let _attrObj = {};\r\n    for (let i = 0; i < attrs.length; i++) {\r\n      // attrs[i] 属性节点 nodeType = 3\r\n      _attrObj[attrs[i].nodeName] = attrs[i].nodeValue;\r\n    }\r\n    _vnode = new VNode(nodeName, _attrObj, undefined, nodeType);\r\n    //  考虑node 子元素\r\n    let childNodes = node.childNodes;\r\n    for (let i = 0; i < childNodes.length; i++) {\r\n      _vnode.appendChild(getVNode(childNodes[i]));\r\n    }\r\n  } else if (nodeType === 3) {\r\n    // 文本\r\n    _vnode = new VNode(undefined, undefined, node.nodeValue, nodeType);\r\n  }\r\n  return _vnode;\r\n}\r\n\r\n//  将vnode 转换为 真实的dom\r\nexport function parseNode(vnode) {\r\n  let type = vnode.type;\r\n  let _node = null;\r\n  if (type === 3) {\r\n    return document.createTextNode(vnode.value);\r\n  } else if (type === 1) {\r\n    _node = document.createElement(vnode.tag);\r\n    // 属性\r\n    let data = vnode.data;\r\n    Object.keys(data).forEach((key) => {\r\n      let attrName = key;\r\n      let attrValue = data[key];\r\n      _node.setAttribute(attrName, attrValue);\r\n    });\r\n    //  子元素\r\n    let children = vnode.children;\r\n    children.forEach((subVNode) => {\r\n      _node.appendChild(parseNode(subVNode));\r\n    });\r\n    return _node;\r\n  }\r\n}\r\n\r\n//  需用用xx.xx.xx 来访问对象\r\n//  柯里化\r\nlet mustche = /\\{\\{(.+?)\\}\\}/g;\r\nfunction createGetValuePath(path) {\r\n  let paths = path.split(\".\"); //[ xx, uu, zz]\r\n  return function getValuePath(obj) {\r\n    let res = null;\r\n    res = obj;\r\n    let prop = paths.shift();\r\n    while (prop) {\r\n      res = res[prop];\r\n      prop = paths.shift();\r\n    }\r\n    return res;\r\n  };\r\n}\r\n\r\n//  render  将带坑的vnode 与数据data 结合 得到填充后的vnode\r\nexport function combine(vnode, data) {\r\n  let {\r\n    type: _type,\r\n    data: _data,\r\n    value: _value,\r\n    tag: _tag,\r\n    children: _children\r\n  } = vnode;\r\n  let _vnode = null;\r\n  if (_type === 3) {\r\n    //  文本节点\r\n    _value = _value.replace(mustche, (_, g1) => {\r\n      let key = g1.trim();\r\n      let getValuePath = createGetValuePath(key)(data);\r\n      return getValuePath;\r\n    });\r\n    _vnode = new VNode(_tag, _data, _value, _type);\r\n  } else if (_type === 1) {\r\n    // 元素节点\r\n    _vnode = new VNode(_tag, _data, _value, _type);\r\n    _children.forEach((_subvnode) => {\r\n      _vnode.appendChild(combine(_subvnode, data));\r\n    });\r\n  }\r\n  return _vnode;\r\n}\r\n","import { getVNode, combine, parseNode } from \"../src/virtualDOM\";\r\n\r\nfunction JGVue(opations) {\r\n  this._data = opations.data;\r\n  this._template = document.querySelector(opations.el); // 在vue中是字符串\r\n  this._parent = this._template.parentNode;\r\n  this.mount();\r\n}\r\n\r\nJGVue.prototype.mount = function () {\r\n  // render  生成虚拟DOM\r\n  this.render = this.createRenderFn(); // 可以缓存虚拟dom\r\n  this.mountComponent();\r\n};\r\nJGVue.prototype.mountComponent = function () {\r\n  // 执行mountComponent 函数\r\n  let mount = () => {\r\n    this.update(this.render());\r\n  };\r\n  mount();\r\n};\r\n/**\r\n * 在真正的vue 中使用二次提交 的设计结构\r\n * 1. 在页面中的dom 和 虚拟dom是一一对应的关系\r\n * 2. 先有AST 和数据生成vnode（render）\r\n * 3. 将旧的vnode 和新的vnode 比较（diff算法） 然后更新（update）\r\n * ------------------\r\n * a->b 转账 1000； 分两件事来做，分两个步骤 （a - 1000， b + 1000）\r\n */\r\n//  生成render 函数 缓存AST （这里使用虚拟dom 模拟）\r\nJGVue.prototype.createRenderFn = function () {\r\n  // vue 将AST+data => vnode\r\n  // 带坑的vnode + data => 含有数据的 vnode\r\n  let ast = getVNode(this._template);\r\n  return function render() {\r\n    // 带坑的 vnode 转换为 带数据的 vnode\r\n    return combine(ast, this._data);\r\n  };\r\n};\r\n// 虚拟dom 渲染到页面中 diff 算法就在这里\r\nJGVue.prototype.update = function (tmp) {\r\n  let dom = parseNode(tmp);\r\n  this._parent.replaceChild(dom, this._template);\r\n};\r\n\r\n// ------->\r\nlet app = new JGVue({\r\n  el: \"#root\",\r\n  data: {\r\n    name: {\r\n      firstName: \"张1\",\r\n      lastName: \"三丰\"\r\n    },\r\n    message: \"info\"\r\n  }\r\n});\r\n"]}