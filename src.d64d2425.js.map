{"version":3,"sources":["src/index.js"],"names":["app","document","getElementById","innerHTML"],"mappings":";;;AAwCA,aAxCA,QAAA,gBAEA,IAAMA,EAAMC,SAASC,eAAe,QACpCF,EAAIG,UAQJ","file":"src.d64d2425.js","sourceRoot":"..","sourcesContent":["import \"./styles.css\";\n\nconst app = document.getElementById(\"root\");\napp.innerHTML = `\n<h1>Hello {{name.firstName}}!</h1>\n<h2> {{name.lastName}}</h2>\n<div>\n  {{message}}\n</div>\n`;\n\n// let data = {\n//   name: \"一个新的name\",\n//   message: \"一个消息\"\n// };\n\n// let mustche = /\\{\\{(.+?)\\}\\}/g;\n\n// function compiler(template, data) {\n//   console.log(template.childNode);\n//   let childNode = template.childNodes;\n//   for (let i = 0; i < childNode.length; i++) {\n//     let type = childNode[i].nodeType; // 1 元素 3 文本节点\n//     if (type === 3) {\n//       //  文本节点判断是否有 {{}} 插值\n//       let text = childNode[i].nodeValue;\n//       childNode[i].nodeValue = text.replace(mustche, (_, g1) => {\n//         // replace 使用正则匹配一次，函数会被调用一次\n//         // 函数的第 0个 参数表示匹配到第0 个参数表示匹配到的内容\n//         // 函数的第n个参数表示正则中的 第n 组\n//         let key = g1.trim();\n//         let value = data[key];\n//         return value;\n//       });\n//     } else if (type === 1) {\n//       //  元素节点 考虑有没有子元素 是否需要递归子元素\n//       compiler(childNode[i], data);\n//     }\n//   }\n// }\n// compiler(app, data);\n"]}